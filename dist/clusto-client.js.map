{"version":3,"sources":["_build/es6/clusto-client.js"],"names":[],"mappings":"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","file":"_build/es6/clusto-client.js","sourcesContent":["const hyperquest = require('hyperquest');\nconst URI = require('URIjs');\nconst Promise = require('bluebird');\n/* -----------------------------------------------------------------------------\n   API Constants\n   ----------------------------------------------------------------------------- */\nexport const Applications = {\n    ATTRIBUTE: 'clustoapi.apps.attribute',\n    ENTITY: 'clustoapi.apps.entity',\n    RESOURCE_MANAGER: 'clustoapi.apps.resourcemanager'\n};\nexport const Mode = {\n    COMPACT: 'compact',\n    EXPANDED: 'expanded'\n};\nexport const Headers = {\n    MODE: 'Clusto-Mode',\n    PER_PAGE: 'Clusto-Per-Page',\n    PAGE: 'Clusto-Page',\n    PAGES: 'Clusto-Pages',\n    MINIFY: 'Clusto-Minify'\n};\nexport const AttributeType = {\n    INTEGER: 'int',\n    STRING: 'string',\n    DATETIME: 'datetime',\n    RELATION: 'relation',\n    JSON: 'json'\n};\n/* -----------------------------------------------------------------------------\n   Client\n   ----------------------------------------------------------------------------- */\nexport class Client {\n    constructor(data) {\n        this.mount_points = new Map();\n        this._base_url = new URI('http://localhost:9664');\n        /* --------------------------------------------------\n           Attribute module\n           -------------------------------------------------- */\n        this.attribute = {\n            __proto__: this,\n            app: Applications.ATTRIBUTE,\n            /**\n             * @see http://clusto-apiserver.readthedocs.org/clustoapi/apps/all.html#clustoapi.apps.attribute.attrs\n             */\n            get(opts) {\n                let path = new URI();\n                if (typeof opts === 'string') {\n                    path.segment(opts); /* name */\n                }\n                else {\n                    path.segment(opts.name);\n                    if (opts.key) {\n                        path.segment(opts.key);\n                    }\n                    if (opts.subkey) {\n                        path.segment(opts.subkey);\n                    }\n                    if (opts.number) {\n                        path.segment(opts.number);\n                    }\n                }\n                return this._get(path.toString(), {\n                    app: this.app\n                });\n            },\n            /**\n             * @see http://clusto-apiserver.readthedocs.org/clustoapi/apps/all.html#clustoapi.apps.attribute.del_attrs\n             */\n            delete(opts) {\n                let path = new URI()\n                    .segment(opts.name)\n                    .segment(opts.key);\n                if (opts.subkey) {\n                    path.segment(opts.subkey);\n                }\n                if (opts.number) {\n                    path.segment(opts.number);\n                }\n                return this._delete(path.toString(), {\n                    app: this.app\n                });\n            }\n        };\n        /* --------------------------------------------------\n           Entity module\n           -------------------------------------------------- */\n        this.entity = {\n            __proto__: this,\n            app: Applications.ENTITY,\n            /**\n             * @see http://clusto-apiserver.readthedocs.org/clustoapi/apps/all.html#clustoapi.apps.entity.list\n             * @see http://clusto-apiserver.readthedocs.org/clustoapi/apps/all.html#clustoapi.apps.entity.show\n             */\n            get(opts) {\n                let path = new URI();\n                let options = (typeof opts === 'string') ? { driver: opts } : opts || {};\n                if (options.driver) {\n                    path.segment(options.driver);\n                }\n                if (options.name) {\n                    path.segment(options.name);\n                }\n                return this._get(path.toString(), {\n                    app: this.app,\n                    mode: options.mode\n                });\n            },\n            /**\n             * @see http://clusto-apiserver.readthedocs.org/clustoapi/apps/all.html#clustoapi.apps.entity.delete\n             */\n            delete(opts) {\n                let path = new URI()\n                    .segment(opts.driver)\n                    .segment(opts.name);\n                return this._delete(path.toString(), {\n                    app: this.app\n                });\n            }\n        };\n        /* --------------------------------------------------\n           Resource manager module\n           -------------------------------------------------- */\n        this.resource = {\n            __proto__: this,\n            app: Applications.RESOURCE_MANAGER,\n            /**\n             * @see http://clusto-apiserver.readthedocs.org/clustoapi/apps/all.html#clustoapi.apps.resourcemanager.list\n             * @see http://clusto-apiserver.readthedocs.org/clustoapi/apps/all.html#clustoapi.apps.resourcemanager.show\n             */\n            get(opts) {\n                let path = new URI();\n                let options = (typeof opts === 'string') ? { driver: opts } : opts || {};\n                if (options.driver) {\n                    path.segment(options.driver);\n                }\n                if (options.manager) {\n                    path.segment(options.manager);\n                }\n                return this._get(path.toString(), {\n                    app: this.app,\n                    mode: options.mode\n                });\n            },\n            /**\n             * @see http://clusto-apiserver.readthedocs.org/clustoapi/apps/all.html#clustoapi.apps.resourcemanager.deallocate\n             */\n            delete(opts) {\n                let path = new URI()\n                    .segment(opts.driver)\n                    .segment(opts.manager);\n                return this._delete(path.toString(), {\n                    app: this.app\n                });\n            }\n        };\n        if (data) {\n            if (typeof data === 'string') {\n                this._base_url = new URI(data);\n            }\n            else {\n                if (data.base_url) {\n                    this._base_url = new URI(data.base_url);\n                }\n            }\n        }\n    }\n    get base_url() {\n        return this._base_url.clone();\n    }\n    /**\n     * Initialize the client, setting up the map of clusto application\n     * mount points (base URL paths).\n     *\n     * @returns Promise\n     */\n    init() {\n        return this.get_meta()\n            .then(data => {\n            this.mount_points.clear();\n            for (let mount of Object.keys(data)) {\n                let app = data[mount];\n                this.mount_points.set(app, mount);\n            }\n        });\n    }\n    /* --------------------------------------------------\n       Main module\n       -------------------------------------------------- */\n    /**\n     * @see http://clusto-apiserver.readthedocs.org/clustoapi/all.html#clustoapi.server.version\n     */\n    get_version() {\n        return this._get('/__version__');\n    }\n    /**\n     * @see http://clusto-apiserver.readthedocs.org/clustoapi/all.html#clustoapi.server.meta\n     */\n    get_meta() {\n        return this._get('/__meta__');\n    }\n    /**\n     * @see http://clusto-apiserver.readthedocs.org/clustoapi/all.html#clustoapi.server.build_docs\n     */\n    get_doc() {\n        return this._get('/__doc__');\n    }\n    /**\n     * @see\n     */\n    get_driverlist() {\n        return this._get('/driverlist');\n    }\n    /**\n     * @see http://clusto-apiserver.readthedocs.org/clustoapi/all.html#clustoapi.server.get_from_pools\n     */\n    get_from_pools(opts) {\n        let options = { params: {} };\n        if (typeof opts === 'string') {\n            options.params.pool = opts;\n        }\n        else {\n            options.params.pool = opts.pool;\n            options.params.driver = opts.driver;\n            options.params.children = opts.children;\n            options.mode = opts.mode;\n        }\n        return this._get('/from-pools', options);\n    }\n    /**\n     * @see http://clusto-apiserver.readthedocs.org/clustoapi/all.html#clustoapi.server.get_by_name\n     */\n    get_by_name(opts) {\n        let options = { params: {} };\n        let name = null;\n        if (typeof opts === 'string') {\n            name = opts;\n        }\n        else {\n            name = opts.name;\n            if (opts.mode) {\n                options.mode = opts.mode;\n            }\n            if (opts.driver) {\n                options.params.driver = opts.driver;\n            }\n        }\n        return this._get(`/by-name/${name}`, options);\n    }\n    /**\n     * @see http://clusto-apiserver.readthedocs.org/clustoapi/all.html#clustoapi.server.get_by_names\n     */\n    get_by_names(opts) {\n        let options = { params: {} };\n        if (opts instanceof Array) {\n            options.params.name = opts;\n        }\n        else {\n            let bno = opts;\n            options.params.name = bno.names;\n            if (bno.mode) {\n                options.mode = bno.mode;\n            }\n        }\n        return this._get('/by-names', options);\n    }\n    /**\n     * @see http://clusto-apiserver.readthedocs.org/clustoapi/all.html#clustoapi.server.get_by_attr\n     */\n    get_by_attr(opts) {\n        let options = { params: {} };\n        if (typeof opts === 'string') {\n            options.params.key = opts;\n        }\n        else {\n            options.params.key = opts.key;\n            if (opts.subkey) {\n                options.params.subkey = opts.subkey;\n            }\n            if (opts.value) {\n                options.params.value = opts.value;\n            }\n        }\n        return this._get('/by-attr', options);\n    }\n    /* ----------------------------------------\n       Internal helpers\n       ---------------------------------------- */\n    _get(path, options) {\n        return this._request('GET', path, options);\n    }\n    _delete(path, options) {\n        return this._request('DELETE', path, options);\n    }\n    _request(method, path, options) {\n        // Build request URL\n        let url = this.base_url;\n        if (options && options.app) {\n            url.segment(this.mount_points.get(options.app));\n        }\n        url.segment(path)\n            .normalizePath();\n        // Set up headers\n        let headers = {\n            'Clusto-Minify': true,\n            'Accept': 'application/json'\n        };\n        if (options && options.mode) {\n            headers[Headers.MODE] = options.mode;\n        }\n        // Query string\n        if (options && options.params) {\n            url.setSearch(options.params);\n        }\n        let req = hyperquest({\n            method: method,\n            uri: url.toString(),\n            headers: headers\n        });\n        return new Promise((resolve, reject) => {\n            let body = '';\n            req\n                .on('data', (buffer) => {\n                body += buffer.toString();\n            })\n                .on('end', () => {\n                let data = JSON.parse(body);\n                resolve(data);\n            })\n                .on('error', (e) => {\n                reject(e);\n            });\n        });\n    }\n}\n//# sourceMappingURL=clusto-client.js.map"]}